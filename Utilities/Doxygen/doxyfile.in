# -------------------------------------------------------------------------
# doxyfile for IGSTK
# modified by S. Barre (Time-stamp: <2003-01-13 20:55:40 barre>
# -------------------------------------------------------------------------

PROJECT_NAME         = IGSTK

FULL_PATH_NAMES      = YES
WARN_IF_UNDOCUMENTED = NO

GENERATE_TREEVIEW    = NO
GENERATE_TODOLIST    = YES
GENERATE_BUGLIST     = YES
GENERATE_HTML        = YES
GENERATE_HTMLHELP    = YES
GENERATE_LATEX       = NO
GENERATE_MAN         = NO
GENERATE_RTF         = NO

HAVE_DOT             = YES
#HAVE_DOT            = NO
DOT_PATH             = "@DOT_PATH@"
CLASS_GRAPH          = YES
COLLABORATION_GRAPH  = YES
TEMPLATE_RELATIONS   = YES
INCLUDE_GRAPH        = YES
INCLUDED_BY_GRAPH    = YES
CLASS_DIAGRAMS       = YES
GENERATE_LEGEND      = YES
GRAPHICAL_HIERARCHY  = YES

ALLEXTERNALS         = NO

IMAGE_PATH           = "@IGSTK_BINARY_DIR@/Utilities/Doxygen/contrib"

OUTPUT_DIRECTORY     = "@IGSTK_BINARY_DIR@/Utilities/Doxygen/doc"

INPUT                = \
 "@IGSTK_SOURCE_DIR@/Source" \
 "@IGSTK_SOURCE_DIR@/Sandbox/Source"



EXTRACT_ALL          = YES
EXTRACT_PRIVATE      = NO
EXTRACT_STATIC       = YES
HIDE_UNDOC_MEMBERS   = NO
HIDE_UNDOC_CLASSES   = YES
ALWAYS_DETAILED_SEC  = NO
SOURCE_BROWSER       = YES
INLINE_SOURCES       = NO
CASE_SENSE_NAMES     = YES
VERBATIM_HEADERS     = NO
SHOW_INCLUDE_FILES   = YES
JAVADOC_AUTOBRIEF    = YES
SORT_MEMBER_DOCS     = NO
DISTRIBUTE_GROUP_DOC = YES
TAB_SIZE             = 3

FILE_PATTERNS        = *.h *.hxx
RECURSIVE            = NO
EXCLUDE_PATTERNS     =

HTML_ALIGN_MEMBERS   = YES
ALPHABETICAL_INDEX   = YES
COLS_IN_ALPHA_INDEX  = 3
IGNORE_PREFIX        = igstk

ENABLE_PREPROCESSING = YES
MACRO_EXPANSION      = YES
SEARCH_INCLUDES      = YES
INCLUDE_PATH         =
EXPAND_ONLY_PREDEF   = YES

PREDEFINED  =  "itkNotUsed(x)="\
               "itkSetMacro(name,type)= \
                  virtual void Set##name (type _arg);" \
               "itkGetMacro(name,type)= \
                  virtual type Get##name ();" \
               "itkGetConstMacro(name,type)= \
                  virtual type Get##name () const;" \
               "itkSetStringMacro(name)= \
                  virtual void Set##name (const char* _arg);" \
               "itkGetStringMacro(name)= \
                  virtual const char* Get##name () const;" \
               "itkSetClampMacro(name,type,min,max)= \
                  virtual void Set##name (type _arg);" \
               "itkSetObjectMacro(name,type)= \
                  virtual void Set##name (type* _arg);" \
               "itkGetObjectMacro(name,type)= \
                  virtual type* Get##name ();" \
               "itkSetConstObjectMacro(name,type)= \
                  virtual void Set##name ( const type* _arg);" \
               "itkGetConstObjectMacro(name,type)= \
                  virtual const type* Get##name ();" \
               "itkGetConstReferenceMacro(name,type)= \
                  virtual const type& Get##name ();" \
               "itkGetConstReferenceObjectMacro(name,type)= \
                  virtual const type::Pointer& Get##name () const;" \
               "itkBooleanMacro(name)= \
                  virtual void name##On (); \
                  virtual void name##Off ();" \
               "itkSetVector2Macro(name,type)= \
                  virtual void Set##name (type _arg1, type _arg2) \
                  virtual void Set##name (type _arg[2]);" \
               "itkGetVector2Macro(name,type)= \
                  virtual type* Get##name () const; \
                  virtual void Get##name (type& _arg1, type& _arg2) const; \
                  virtual void Get##name (type _arg[2]) const;" \
               "itkSetVector3Macro(name,type)= \
                  virtual void Set##name (type _arg1, type _arg2, type _arg3) \
                  virtual void Set##name (type _arg[3]);" \
               "itkGetVector3Macro(name,type)= \
                  virtual type* Get##name () const; \
                  virtual void Get##name (type& _arg1, type& _arg2, type& _arg3) const; \
                  virtual void Get##name (type _arg[3]) const;" \
               "itkSetVector4Macro(name,type)= \
                  virtual void Set##name (type _arg1, type _arg2, type _arg3, type _arg4) \
                  virtual void Set##name (type _arg[4]);" \
               "itkGetVector4Macro(name,type)= \
                  virtual type* Get##name () const; \
                  virtual void Get##name (type& _arg1, type& _arg2, type& _arg3, type& _arg4) const; \
                  virtual void Get##name (type _arg[4]) const;" \
               "itkSetVector6Macro(name,type)= \
                  virtual void Set##name (type _arg1, type _arg2, type _arg3, type _arg4, type _arg5, type _arg6) \
                  virtual void Set##name (type _arg[6]);" \
               "itkGetVector6Macro(name,type)= \
                  virtual type* Get##name () const; \
                  virtual void Get##name (type& _arg1, type& _arg2, type& _arg3, type& _arg4, type& _arg5, type& _arg6) const; \
                  virtual void Get##name (type _arg[6]) const;" \
               "itkSetVectorMacro(name,type,count)= \
                  virtual void Set##name(type data[]);" \
               "itkGetVectorMacro(name,type,count)= \
                  virtual type* Get##name () const;" \
               "itkNewMacro(type)= \
                  static Pointer New();" \
               "itkTypeMacro(thisClass,superclass)= \
                  virtual const char *GetClassName() const;" \
               "itkConceptMacro(name,concept)= \
                  enum { name = 0 };" \
               "vcl_numeric_limits= \
                  std::numeric_limits" \
               "ITK_TYPENAME= \
                  typename" \
               "FEM_ABSTRACT_CLASS(thisClass,parentClass)= \
                  public:                                               \
                    /** Standard "Self" typedef.*/                      \
                    typedef thisClass Self;                             \
                    /** Standard "Superclass" typedef. */               \
                    typedef parentClass Superclass;                     \
                    /** Pointer or SmartPointer to an object. */        \
                    typedef Self* Pointer;                              \
                    /** Const pointer or SmartPointer to an object. */  \
                    typedef const Self* ConstPointer;                   \
                  private:"                                             \
               "FEM_CLASS(thisClass,parentClass)= \
                  FEM_ABSTRACT_CLASS(thisClass,parentClass)             \
                  public:                                               \
                    /** Create a new object from the existing one  */   \
                    virtual Baseclass::Pointer Clone() const;           \
                    /** Class ID for FEM object factory */              \
                    static const int CLID;                              \
                    /** Virtual function to access the class ID */      \
                    virtual int ClassID() const                         \
                      { return CLID; }                                  \
                    /** Object creation in an itk compatible way */     \
                    static Self::Pointer New()                          \
                      { return new Self(); }                            \
                  private:"                                             \
		"FREEVERSION" "ERROR_CHECKING"                          \
                "HAS_TIFF" "HAS_JPEG" "HAS_NETLIB" "HAS_PNG" "HAS_ZLIB" \
                "HAS_GLUT" "HAS_QT"                                     \
               "VCL_USE_NATIVE_STL=1" "VCL_USE_NATIVE_COMPLEX=1"        \
               "VCL_HAS_BOOL=1" "VXL_BIG_ENDIAN=1" "VXL_LITTLE_ENDIAN=0"\
               "VNL_DLL_DATA=" "size_t=vcl_size_t"
