// generated by Fast Light User Interface Designer (fluid) version 1.0107

#ifndef QuadrantViews_h
#define QuadrantViews_h
#include <FL/Fl.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Value_Slider.H>

#include "igstkFLTKWidget.h"
#include "igstkView2D.h"
#include "igstkView3D.h"
#include "igstkEvents.h"
#include "igstkCTImageSpatialObject.h"

namespace igstk {

class QuadrantViews : public Fl_Group {
public:

  QuadrantViews(int X, int Y, int W, int H, const char *L = 0);
  
  virtual ~QuadrantViews(void);

  typedef igstk::View          ViewType;
  typedef igstk::View2D        ViewType2D;
  typedef igstk::View3D        ViewType3D;

  ViewType2D::Pointer          DisplayAxial;
  ViewType2D::Pointer          DisplayCoronal;
  ViewType2D::Pointer          DisplaySagittal;
  ViewType3D::Pointer          Display3D;

  igstk::FLTKWidget *DisplayAxialWidget;
  igstk::FLTKWidget *DisplaySagittalWidget;
  igstk::FLTKWidget *DisplayCoronalWidget;
  igstk::FLTKWidget *Display3DWidget;

  Fl_Value_Slider *AxialSlider;
  Fl_Value_Slider *SagittalSlider;
  Fl_Value_Slider *CoronalSlider;

  std::vector< igstk::FLTKWidget * >   Displays;
  std::vector< ViewType::Pointer   >   Views;
  std::vector< Fl_Value_Slider   * >   Sliders;

  /** Event for reslicing from slider bar */
  typedef CTImageSpatialObject::IndexType                      IndexType;

  igstkLoadedEventMacro( ReslicingEvent, IGSTKEvent, IndexType );

  unsigned long AddObserver( const ::itk::EventObject & event, ::itk::Command * observer );
  void RemoveObserver( unsigned long tag );
  void RemoveAllObservers();

protected:

  virtual void RequestResliceImage(void);

private:

  // Call backs for slider bars
  void cb_AxialSlider_i(Fl_Value_Slider*, void*);
  static void cb_AxialSlider(Fl_Value_Slider*, void*);
  void cb_SagittalSlider_i(Fl_Value_Slider*, void*);
  static void cb_SagittalSlider(Fl_Value_Slider*, void*);
  void cb_CoronalSlider_i(Fl_Value_Slider*, void*);
  static void cb_CoronalSlider(Fl_Value_Slider*, void*);

  ::itk::Object::Pointer    m_Reporter;

};

} // end namespace igstk

#endif
