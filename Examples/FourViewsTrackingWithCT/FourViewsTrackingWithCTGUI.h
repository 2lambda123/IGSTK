// generated by Fast Light User Interface Designer (fluid) version 1.0107

#ifndef FourViewsTrackingWithCTGUI_h
#define FourViewsTrackingWithCTGUI_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include "igstkFLTKWidget.h"
#include <igstkView2D.h>
#include <igstkView3D.h>
#include <igstkObject.h>
#include <FL/Fl_Group.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Text_Display.H>

class FourViewsTrackingWithCTGUI : public igstk::Object {
public:
  FourViewsTrackingWithCTGUI();
  Fl_Double_Window *mainWindow;
  Fl_Group *ControlGroup;
  Fl_Light_Button *TrackingButton;
private:
  void cb_TrackingButton_i(Fl_Light_Button*, void*);
  static void cb_TrackingButton(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *LoadImageButton;
private:
  void cb_LoadImageButton_i(Fl_Light_Button*, void*);
  static void cb_LoadImageButton(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *SetPatientNameButton;
private:
  void cb_SetPatientNameButton_i(Fl_Light_Button*, void*);
  static void cb_SetPatientNameButton(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *InitializeTrackerButton;
private:
  void cb_InitializeTrackerButton_i(Fl_Light_Button*, void*);
  static void cb_InitializeTrackerButton(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *AddImageLandmarkButton;
private:
  void cb_AddImageLandmarkButton_i(Fl_Light_Button*, void*);
  static void cb_AddImageLandmarkButton(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *AddTrackerLandmarkButton;
private:
  void cb_AddTrackerLandmarkButton_i(Fl_Light_Button*, void*);
  static void cb_AddTrackerLandmarkButton(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *RegistrationButton;
private:
  void cb_RegistrationButton_i(Fl_Light_Button*, void*);
  static void cb_RegistrationButton(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *QuitButton;
  Fl_Button *ClearImageLandmarks;
private:
  void cb_ClearImageLandmarks_i(Fl_Button*, void*);
  static void cb_ClearImageLandmarks(Fl_Button*, void*);
public:
  Fl_Button *ClearTrackerLandmarks;
private:
  void cb_ClearTrackerLandmarks_i(Fl_Button*, void*);
  static void cb_ClearTrackerLandmarks(Fl_Button*, void*);
public:
  Fl_Value_Output *NumberOfImageLandmarks;
  Fl_Value_Output *NumberOfTrackerLandmarks;
  Fl_Button *Reset;
private:
  void cb_Reset_i(Fl_Button*, void*);
  static void cb_Reset(Fl_Button*, void*);
public:
  Fl_Group *ViewerGroup;
  igstk::FLTKWidget *m_DisplayAxialWidget;
  igstk::FLTKWidget *m_DisplaySagittalWidget;
  igstk::FLTKWidget *m_Display3DWidget;
  igstk::FLTKWidget *m_DisplayCoronalWidget;
  Fl_Value_Slider *AxialSlider;
private:
  void cb_AxialSlider_i(Fl_Value_Slider*, void*);
  static void cb_AxialSlider(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *SagittalSlider;
private:
  void cb_SagittalSlider_i(Fl_Value_Slider*, void*);
  static void cb_SagittalSlider(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *CoronalSlider;
private:
  void cb_CoronalSlider_i(Fl_Value_Slider*, void*);
  static void cb_CoronalSlider(Fl_Value_Slider*, void*);
public:
  Fl_Text_Display *m_LogWindow;
  virtual ~FourViewsTrackingWithCTGUI();
  virtual void RequestSetPatientName();
  virtual void RequestLoadImage();
  virtual void RequestInitializeTracker();
  virtual void RequestAddImageLandmark();
  virtual void RequestAddTrackerLandmark();
  virtual void RequestClearImageLandmarks();
  virtual void RequestClearTrackerLandmarks();
  virtual void RequestRegistration();
  virtual void RequestStartTracking();
  virtual void RequestStopTracking();
  virtual void RequestResliceImage();
  virtual void RequestReset();
private:
  protected: igstk::View2D::Pointer m_DisplayAxial;
  igstk::View2D::Pointer m_DisplayCoronal;
  igstk::View2D::Pointer m_DisplaySagittal;
  igstk::View3D::Pointer m_Display3D;
};
#endif
