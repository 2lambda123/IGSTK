// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "/home/ozgur/workspace/IGSTKSandbox/Examples/FourViewsTrackingWithCT/FourViewsTrackingWithCTGUI.h"
#include <FL/fl_ask.H>

static void Quit( Fl_Widget*, void* ) {
  if ( !fl_choice("Are you sure you want to quit?","Yes","No","Cancel") )
  {
  return;
  }
else
  {
  exit(0);
  }
}

void FourViewsTrackingWithCTGUI::cb_TrackingButton_i(Fl_Light_Button* o, void*) {
  if(o->value())
{
  RequestStartTracking();
}
else
{
    RequestStopTracking();
};
}
void FourViewsTrackingWithCTGUI::cb_TrackingButton(Fl_Light_Button* o, void* v) {
  ((FourViewsTrackingWithCTGUI*)(o->parent()->parent()->user_data()))->cb_TrackingButton_i(o,v);
}

void FourViewsTrackingWithCTGUI::cb_LoadImageButton_i(Fl_Light_Button*, void*) {
  RequestLoadImage();
}
void FourViewsTrackingWithCTGUI::cb_LoadImageButton(Fl_Light_Button* o, void* v) {
  ((FourViewsTrackingWithCTGUI*)(o->parent()->parent()->user_data()))->cb_LoadImageButton_i(o,v);
}

void FourViewsTrackingWithCTGUI::cb_SetPatientNameButton_i(Fl_Light_Button*, void*) {
  RequestSetPatientName();
}
void FourViewsTrackingWithCTGUI::cb_SetPatientNameButton(Fl_Light_Button* o, void* v) {
  ((FourViewsTrackingWithCTGUI*)(o->parent()->parent()->user_data()))->cb_SetPatientNameButton_i(o,v);
}

void FourViewsTrackingWithCTGUI::cb_InitializeTrackerButton_i(Fl_Light_Button*, void*) {
  RequestInitializeTracker();
}
void FourViewsTrackingWithCTGUI::cb_InitializeTrackerButton(Fl_Light_Button* o, void* v) {
  ((FourViewsTrackingWithCTGUI*)(o->parent()->parent()->user_data()))->cb_InitializeTrackerButton_i(o,v);
}

void FourViewsTrackingWithCTGUI::cb_AddImageLandmarkButton_i(Fl_Light_Button*, void*) {
  RequestAddImageLandmark();
}
void FourViewsTrackingWithCTGUI::cb_AddImageLandmarkButton(Fl_Light_Button* o, void* v) {
  ((FourViewsTrackingWithCTGUI*)(o->parent()->parent()->user_data()))->cb_AddImageLandmarkButton_i(o,v);
}

void FourViewsTrackingWithCTGUI::cb_AddTrackerLandmarkButton_i(Fl_Light_Button*, void*) {
  RequestAddTrackerLandmark();
}
void FourViewsTrackingWithCTGUI::cb_AddTrackerLandmarkButton(Fl_Light_Button* o, void* v) {
  ((FourViewsTrackingWithCTGUI*)(o->parent()->parent()->user_data()))->cb_AddTrackerLandmarkButton_i(o,v);
}

void FourViewsTrackingWithCTGUI::cb_RegistrationButton_i(Fl_Light_Button*, void*) {
  RequestRegistration();
}
void FourViewsTrackingWithCTGUI::cb_RegistrationButton(Fl_Light_Button* o, void* v) {
  ((FourViewsTrackingWithCTGUI*)(o->parent()->parent()->user_data()))->cb_RegistrationButton_i(o,v);
}

void FourViewsTrackingWithCTGUI::cb_ClearImageLandmarks_i(Fl_Button*, void*) {
  RequestClearImageLandmarks();
}
void FourViewsTrackingWithCTGUI::cb_ClearImageLandmarks(Fl_Button* o, void* v) {
  ((FourViewsTrackingWithCTGUI*)(o->parent()->parent()->user_data()))->cb_ClearImageLandmarks_i(o,v);
}

void FourViewsTrackingWithCTGUI::cb_ClearTrackerLandmarks_i(Fl_Button*, void*) {
  RequestClearTrackerLandmarks();
}
void FourViewsTrackingWithCTGUI::cb_ClearTrackerLandmarks(Fl_Button* o, void* v) {
  ((FourViewsTrackingWithCTGUI*)(o->parent()->parent()->user_data()))->cb_ClearTrackerLandmarks_i(o,v);
}

void FourViewsTrackingWithCTGUI::cb_Reset_i(Fl_Button*, void*) {
  RequestReset();
}
void FourViewsTrackingWithCTGUI::cb_Reset(Fl_Button* o, void* v) {
  ((FourViewsTrackingWithCTGUI*)(o->parent()->parent()->user_data()))->cb_Reset_i(o,v);
}

void FourViewsTrackingWithCTGUI::cb_AxialSlider_i(Fl_Value_Slider*, void*) {
  this->RequestResliceImage();
}
void FourViewsTrackingWithCTGUI::cb_AxialSlider(Fl_Value_Slider* o, void* v) {
  ((FourViewsTrackingWithCTGUI*)(o->parent()->parent()->user_data()))->cb_AxialSlider_i(o,v);
}

void FourViewsTrackingWithCTGUI::cb_SagittalSlider_i(Fl_Value_Slider*, void*) {
  this->RequestResliceImage();
}
void FourViewsTrackingWithCTGUI::cb_SagittalSlider(Fl_Value_Slider* o, void* v) {
  ((FourViewsTrackingWithCTGUI*)(o->parent()->parent()->user_data()))->cb_SagittalSlider_i(o,v);
}

void FourViewsTrackingWithCTGUI::cb_CoronalSlider_i(Fl_Value_Slider*, void*) {
  this->RequestResliceImage();
}
void FourViewsTrackingWithCTGUI::cb_CoronalSlider(Fl_Value_Slider* o, void* v) {
  ((FourViewsTrackingWithCTGUI*)(o->parent()->parent()->user_data()))->cb_CoronalSlider_i(o,v);
}

FourViewsTrackingWithCTGUI::FourViewsTrackingWithCTGUI() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = mainWindow = new Fl_Double_Window(1145, 735, "IGSTK: Four Veiws Tracking With CT Images Example");
    w = o;
    o->box(FL_PLASTIC_UP_BOX);
    o->user_data((void*)(this));
    { Fl_Group* o = ControlGroup = new Fl_Group(0, 0, 375, 690);
      o->box(FL_DOWN_BOX);
      { Fl_Light_Button* o = TrackingButton = new Fl_Light_Button(18, 260, 130, 25, "Tracking");
        o->box(FL_PLASTIC_UP_FRAME);
        o->labelsize(11);
        o->callback((Fl_Callback*)cb_TrackingButton);
      }
      { Fl_Light_Button* o = LoadImageButton = new Fl_Light_Button(15, 60, 130, 25, "Load Image");
        o->box(FL_PLASTIC_UP_FRAME);
        o->labelsize(11);
        o->callback((Fl_Callback*)cb_LoadImageButton);
      }
      { Fl_Light_Button* o = SetPatientNameButton = new Fl_Light_Button(15, 20, 130, 25, "Register Patient");
        o->box(FL_PLASTIC_UP_FRAME);
        o->labelsize(11);
        o->callback((Fl_Callback*)cb_SetPatientNameButton);
      }
      { Fl_Light_Button* o = InitializeTrackerButton = new Fl_Light_Button(15, 140, 130, 25, "Initialize Tracker");
        o->box(FL_PLASTIC_UP_FRAME);
        o->labelsize(11);
        o->callback((Fl_Callback*)cb_InitializeTrackerButton);
      }
      { Fl_Light_Button* o = AddImageLandmarkButton = new Fl_Light_Button(15, 100, 130, 25, "Add Image Landmark");
        o->box(FL_PLASTIC_UP_FRAME);
        o->labelsize(11);
        o->callback((Fl_Callback*)cb_AddImageLandmarkButton);
      }
      { Fl_Light_Button* o = AddTrackerLandmarkButton = new Fl_Light_Button(17, 180, 130, 25, "Add Tracker Landmark");
        o->box(FL_PLASTIC_UP_FRAME);
        o->labelsize(11);
        o->callback((Fl_Callback*)cb_AddTrackerLandmarkButton);
      }
      { Fl_Light_Button* o = RegistrationButton = new Fl_Light_Button(17, 220, 130, 25, "Landmark Registration");
        o->box(FL_PLASTIC_UP_FRAME);
        o->labelsize(11);
        o->callback((Fl_Callback*)cb_RegistrationButton);
      }
      { Fl_Light_Button* o = QuitButton = new Fl_Light_Button(20, 300, 130, 25, "Quit");
        o->type(0);
        o->box(FL_PLASTIC_UP_FRAME);
        o->labelsize(11);
      }
      { Fl_Button* o = ClearImageLandmarks = new Fl_Button(250, 100, 50, 25, "Clear");
        o->box(FL_PLASTIC_UP_FRAME);
        o->callback((Fl_Callback*)cb_ClearImageLandmarks);
      }
      { Fl_Button* o = ClearTrackerLandmarks = new Fl_Button(250, 180, 50, 25, "Clear");
        o->box(FL_PLASTIC_UP_FRAME);
        o->callback((Fl_Callback*)cb_ClearTrackerLandmarks);
      }
      { Fl_Value_Output* o = NumberOfImageLandmarks = new Fl_Value_Output(175, 100, 32, 25, "No.");
        o->box(FL_DOWN_BOX);
        o->maximum(100);
        o->step(1);
        o->textfont(1);
      }
      { Fl_Value_Output* o = NumberOfTrackerLandmarks = new Fl_Value_Output(185, 180, 32, 25, "No.");
        o->box(FL_DOWN_BOX);
        o->maximum(100);
        o->step(1);
        o->textfont(1);
      }
      { Fl_Button* o = Reset = new Fl_Button(250, 300, 50, 25, "Reset");
        o->box(FL_PLASTIC_UP_FRAME);
        o->callback((Fl_Callback*)cb_Reset);
      }
      o->end();
    }
    { Fl_Group* o = ViewerGroup = new Fl_Group(375, 0, 770, 692);
      o->box(FL_DOWN_BOX);
      { igstk::FLTKWidget* o = m_DisplayAxialWidget = new igstk::FLTKWidget(376, 1, 380, 330, "Display Axial");
        o->box(FL_FLAT_BOX);
        o->color(FL_FOREGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { igstk::FLTKWidget* o = m_DisplaySagittalWidget = new igstk::FLTKWidget(765, 1, 380, 330, "Display Sagittal");
        o->box(FL_FLAT_BOX);
        o->color(FL_FOREGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { igstk::FLTKWidget* o = m_Display3DWidget = new igstk::FLTKWidget(765, 346, 380, 330, "Display 3D");
        o->box(FL_FLAT_BOX);
        o->color(FL_FOREGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { igstk::FLTKWidget* o = m_DisplayCoronalWidget = new igstk::FLTKWidget(376, 346, 380, 330, "Display Coronal");
        o->box(FL_FLAT_BOX);
        o->color(FL_FOREGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Slider* o = AxialSlider = new Fl_Value_Slider(377, 331, 378, 15);
        o->type(5);
        o->box(FL_DOWN_FRAME);
        o->maximum(3);
        o->step(1);
        o->callback((Fl_Callback*)cb_AxialSlider);
        o->deactivate();
      }
      { Fl_Value_Slider* o = SagittalSlider = new Fl_Value_Slider(765, 330, 378, 15);
        o->type(5);
        o->box(FL_DOWN_FRAME);
        o->maximum(3);
        o->step(1);
        o->callback((Fl_Callback*)cb_SagittalSlider);
        o->deactivate();
      }
      { Fl_Value_Slider* o = CoronalSlider = new Fl_Value_Slider(376, 676, 380, 15);
        o->type(5);
        o->box(FL_DOWN_FRAME);
        o->maximum(3);
        o->step(1);
        o->callback((Fl_Callback*)cb_CoronalSlider);
        o->deactivate();
      }
      o->end();
    }
    { Fl_Text_Display* o = m_LogWindow = new Fl_Text_Display(0, 690, 1145, 60);
      o->box(FL_DOWN_BOX);
    }
    o->end();
    o->resizable(o);
  }
  m_DisplayAxial = igstk::View2D::New();
m_DisplayCoronal = igstk::View2D::New();
m_DisplaySagittal = igstk::View2D::New();
m_Display3D = igstk::View3D::New();
this->m_DisplayAxial->RequestSetOrientation( igstk::View2D::Axial );
this->m_DisplaySagittal->RequestSetOrientation( igstk::View2D::Sagittal );
this->m_DisplayCoronal->RequestSetOrientation( igstk::View2D::Coronal );
this->m_DisplayAxialWidget->RequestSetView( this->m_DisplayAxial );
this->m_DisplayCoronalWidget->RequestSetView( this->m_DisplayCoronal );
this->m_DisplaySagittalWidget->RequestSetView( this->m_DisplaySagittal );
this->m_Display3DWidget->RequestSetView( this->m_Display3D );
mainWindow->show();
mainWindow->callback( Quit );
QuitButton->callback( Quit );
}

FourViewsTrackingWithCTGUI::~FourViewsTrackingWithCTGUI() {
  delete m_DisplayAxialWidget;
delete m_DisplayCoronalWidget;
delete m_DisplaySagittalWidget;
delete m_Display3DWidget;
}

void FourViewsTrackingWithCTGUI::RequestSetPatientName() {
}

void FourViewsTrackingWithCTGUI::RequestLoadImage() {
}

void FourViewsTrackingWithCTGUI::RequestInitializeTracker() {
}

void FourViewsTrackingWithCTGUI::RequestAddImageLandmark() {
}

void FourViewsTrackingWithCTGUI::RequestAddTrackerLandmark() {
}

void FourViewsTrackingWithCTGUI::RequestClearImageLandmarks() {
}

void FourViewsTrackingWithCTGUI::RequestClearTrackerLandmarks() {
}

void FourViewsTrackingWithCTGUI::RequestRegistration() {
}

void FourViewsTrackingWithCTGUI::RequestStartTracking() {
}

void FourViewsTrackingWithCTGUI::RequestStopTracking() {
}

void FourViewsTrackingWithCTGUI::RequestResliceImage() {
}

void FourViewsTrackingWithCTGUI::RequestReset() {
}
