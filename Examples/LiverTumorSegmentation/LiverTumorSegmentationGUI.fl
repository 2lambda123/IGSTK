# data file for the Fltk User Interface Designer (fluid)
version 1.0104 
header_name {.h} 
code_name {.cxx}
decl {\#include <FL/Fl_File_Chooser.H>} {public
} 

decl {\#include <FL/Fl_Help_Dialog.H>} {public
} 

class LiverTumorSegmentationGUI {open : {public LiverTumorSegmentationBase}
} {
  Function {LiverTumorSegmentationGUI()} {open
  } {
    Fl_Window m_MainWindow {
      label {Liver Tumor Segmentation, ISIS Center, Georgetown University, Washington DC.} open
      xywh {387 46 633 672} type Double resizable
      code0 {\#include "LiverTumorSegmentationBase.h"} visible
    } {
      Fl_Box axialView {
        xywh {124 21 250 300} box DOWN_FRAME align 2
        code0 {\#include "vtkFlRenderWindowInteractor.h"}
        class vtkFlRenderWindowInteractor
      }
      Fl_Value_Slider axialViewSlider {
        callback {this->SelectAxialSlice( static_cast<int>( o->value() ));}
        xywh {125 323 250 10} type Horizontal color 25 maximum 100 step 1
      }
      Fl_Box coronalView {
        xywh {378 21 250 300} box DOWN_FRAME align 2
        code0 {\#include "vtkFlRenderWindowInteractor.h"}
        class vtkFlRenderWindowInteractor
      }
      Fl_Value_Slider coronalViewSlider {
        callback {this->SelectCoronalSlice( static_cast<int>( o->value() ) );}
        xywh {378 323 250 10} type Horizontal color 25 maximum 100 step 1
      }
      Fl_Box saggitalView {
        xywh {125 335 250 300} box DOWN_FRAME align 2
        code0 {\#include "vtkFlRenderWindowInteractor.h"}
        class vtkFlRenderWindowInteractor
      }
      Fl_Value_Slider saggitalViewSlider {
        callback {this->SelectSaggitalSlice( static_cast<int>( o->value() ) );}
        xywh {126 637 250 10} type Horizontal color 25 maximum 100 step 1
      }
      Fl_Menu_Bar {} {
        xywh {0 0 641 20}
      } {
        submenu {} {
          label File open
          xywh {0 0 100 20}
        } {
          menuitem {} {
            label {Load File}
            callback {this->Load();}
            xywh {0 0 100 20}
          }
          menuitem {} {
            label {Load DICOM }
            callback {this->LoadDICOM();}
            xywh {0 0 100 20}
          }
          menuitem {} {
            label {Load Segmented Volume}
            callback {this->LoadSegmentedVolume();}
            xywh {0 0 100 20}
          }
          menuitem {} {
            label {Write Segmented Volume}
            callback {char *fname = fl_file_chooser("Save File As?", "*.gipl", "");
if (fname != NULL) 
{
    this->WriteSegmentedVolume( fname );
}}
            xywh {5 5 100 20}
          }
          menuitem {} {
            label {Write Binary Segmented Volume}
            callback {char *fname = fl_file_chooser("Save File As?", "*.gipl", "");
if (fname != NULL) 
{
    this->WriteBinarySegmentedVolume( fname );
}}
            xywh {15 15 100 20}
          }
          menuitem {} {
            label Quit
            callback {this->Quit();}
            xywh {20 20 100 20}
          }
        }
        submenu {} {
          label Settings open
          xywh {0 0 100 20}
        } {
          menuitem {} {
            label {Segmentation Parameters}
            callback {float ftmp;

ftmp = this->m_LiverTumorSegmentationModule.GetLowerThreshold();
sprintf(m_MessageString, "%4.1f", ftmp);
m_LowerThreshold->value( m_MessageString );

ftmp = this->m_LiverTumorSegmentationModule.GetUpperThreshold();
sprintf(m_MessageString, "%4.1f", ftmp);
m_UpperThreshold->value( m_MessageString );

ftmp = this->m_LiverTumorSegmentationModule.GetCurvatureScaling();
sprintf(m_MessageString, "%4.3f", ftmp);
m_CurvatureScaling->value( m_MessageString );

ftmp = this->m_LiverTumorSegmentationModule.GetPropagationScaling();
sprintf(m_MessageString, "%4.3f", ftmp);
m_PropagationScaling->value( m_MessageString );

ftmp = this->m_LiverTumorSegmentationModule.GetAdvectionScaling();
sprintf(m_MessageString, "%4.3f", ftmp);
m_AdvectionScaling->value( m_MessageString );

ftmp = this->m_LiverTumorSegmentationModule.GetMaximumRMSError();
sprintf(m_MessageString, "%4.3f", ftmp);
m_MaxRMSError->value( m_MessageString );

int itmp = this->m_LiverTumorSegmentationModule.GetMaximumIterations();
sprintf(m_MessageString, "%d", itmp);
m_MaxIterations->value( m_MessageString );

ftmp = this->m_LiverTumorSegmentationModule.GetMultiplier();
sprintf(m_MessageString, "%4.3f", ftmp);
m_Multiplier->value( m_MessageString );

itmp = this->m_LiverTumorSegmentationModule.GetNumberOfIterations();
sprintf(m_MessageString, "%d", itmp);
m_NumberOfIterations->value( m_MessageString );

ftmp = this->m_LiverTumorSegmentationModule.GetInitialNeighborhoodRadius();
sprintf(m_MessageString, "%4.3f", ftmp);
m_InitialRadius->value( m_MessageString );

m_SegmentationParametersWindow->show();}
            xywh {0 0 100 20}
          }
          menuitem {} {
            label {Shift and Scale}
            callback {sprintf(m_MessageString, "%4.3f", this->GetImageShift());
m_Shift->value( m_MessageString );
sprintf(m_MessageString, "%4.3f", this->GetImageScale());
m_Scale->value( m_MessageString );
m_ShiftAndScaleParameterWindow->show();}
            xywh {0 0 100 20}
          }
          menuitem {} {
            label {Image Control}
            callback {this->OnImageControl();
m_ImageControlWindow->show();}
            xywh {0 0 100 20}
          }
        }
        submenu {} {
          label Processing open
          xywh {10 10 100 20}
        } {
          menuitem {} {
            label Threshold
            callback {float ftmp;

ftmp = this->m_LiverTumorSegmentationModule.GetLowerThreshold();
sprintf(m_MessageString, "%4.1f", ftmp);
m_LowerThresholdValue->value( m_MessageString );

ftmp = this->m_LiverTumorSegmentationModule.GetUpperThreshold();
sprintf(m_MessageString, "%4.1f", ftmp);
m_UpperThresholdValue->value( m_MessageString );

m_ThresholdWindow->show();}
            xywh {0 0 100 20}
          }
          menuitem {} {
            label Segmentation
            callback {this->OnSegmentation();}
            xywh {10 10 100 20}
          }
        }
        submenu {} {
          label Help open
          xywh {20 20 100 20}
        } {
          menuitem {} {
            label {How to use?}
            callback {Fl_Help_Dialog	*help;		// Help dialog
help = new Fl_Help_Dialog;
help->load("how_to_use.html");
help->show();}
            xywh {0 0 100 20}
          }
          menuitem {} {
            label About
            callback {m_AboutWindow->show();}
            xywh {0 0 100 20}
          }
        }
      }
      Fl_Box m_MessageBar {
        xywh {0 651 630 20} box THIN_DOWN_BOX align 20
      }
      Fl_Slider m_ProgressSlider {
        xywh {1 651 630 20} type {Horz Fill} selection_color 66 when 2 deactivate
        code0 {\#include <fltkProgressBar.h>}
        class {fltk::ProgressBar}
      }
      Fl_Button {} {
        label {Load Image}
        callback {this->Load();}
        xywh {5 35 115 30} box PLASTIC_UP_BOX color 67
      }
      Fl_Button {} {
        label Segmentation
        callback {this->OnSegmentation();}
        xywh {5 77 115 30} box PLASTIC_UP_BOX color 67
      }
      Fl_Button {} {
        label Quit
        callback {this->Quit();}
        xywh {5 120 115 30} box PLASTIC_UP_BOX color 67
      }
      Fl_Group {} {
        label {Seed Point}
        xywh {5 565 115 82} box PLASTIC_UP_BOX labelfont 1 labelcolor 116 align 5
      } {
        Fl_Input m_SeedX {
          label X
          callback {this->SetSeedPoint(atof(m_SeedX->value()),atof(m_SeedY->value()),atof(m_SeedZ->value()) );}
          xywh {38 570 60 25} labelcolor 80
        }
        Fl_Input m_SeedY {
          label Y
          callback {this->SetSeedPoint(atof(m_SeedX->value()),atof(m_SeedY->value()),atof(m_SeedZ->value()) );}
          xywh {38 596 60 25} labelcolor 80
        }
        Fl_Input m_SeedZ {
          label Z
          callback {this->SetSeedPoint(atof(m_SeedX->value()),atof(m_SeedY->value()),atof(m_SeedZ->value()) );}
          xywh {38 621 60 25} labelcolor 80
        }
      }
      Fl_Box volumeView {
        xywh {380 335 250 300} box DOWN_FRAME align 2
        code0 {\#include "vtkFlRenderWindowInteractor.h"}
        class vtkFlRenderWindowInteractor
      }
    }
    Fl_Window m_SegmentationParametersWindow {
      label {Segmentation Parameters}
      xywh {707 116 258 431} type Double labelfont 3 visible
    } {
      Fl_Input m_LowerThreshold {
        label {Lower Threshold }
        xywh {155 8 75 26} labelfont 1
      }
      Fl_Input m_UpperThreshold {
        label {Upper Threshold }
        xywh {155 44 75 25} labelfont 1
      }
      Fl_Return_Button {} {
        label Ok
        callback {this->m_LiverTumorSegmentationModule.SetLowerThreshold( atof(m_LowerThreshold->value() ) );
this->m_LiverTumorSegmentationModule.SetUpperThreshold( atof(m_UpperThreshold->value() ) );
this->m_LiverTumorSegmentationModule.SetCurvatureScaling( atof(m_CurvatureScaling->value() ) );
this->m_LiverTumorSegmentationModule.SetPropagationScaling( atof(m_PropagationScaling->value() ) );
this->m_LiverTumorSegmentationModule.SetAdvectionScaling( atof(m_AdvectionScaling->value() ) );
this->m_LiverTumorSegmentationModule.SetMaximumRMSError( atof(m_MaxRMSError->value() ) );
this->m_LiverTumorSegmentationModule.SetMaximumIterations( atoi(m_MaxIterations->value() ) );
this->m_LiverTumorSegmentationModule.SetMultiplier( atof(m_Multiplier->value() ) );
this->m_LiverTumorSegmentationModule.SetInitialNeighborhoodRadius( atoi(m_InitialRadius->value() ) );
this->m_LiverTumorSegmentationModule.SetNumberOfIterations( atoi(m_NumberOfIterations->value() ) );

m_SegmentationParametersWindow->hide();}
        xywh {118 398 45 25} labelfont 1
      }
      Fl_Button {} {
        label Cancel
        callback {m_SegmentationParametersWindow->hide();}
        xywh {177 398 53 25} labelfont 1
      }
      Fl_Input m_CurvatureScaling {
        label {Curvature Scaling}
        xywh {155 80 75 25} labelfont 1
      }
      Fl_Input m_PropagationScaling {
        label {Propagation Scaling}
        xywh {155 116 75 25} labelfont 1
      }
      Fl_Input m_AdvectionScaling {
        label {Advection Scaling}
        xywh {155 152 75 25} labelfont 1
      }
      Fl_Input m_MaxRMSError {
        label {Max RMS Error}
        xywh {155 188 75 25} labelfont 1
      }
      Fl_Input m_MaxIterations {
        label {Max Iterations}
        xywh {155 224 75 25} labelfont 1
      }
      Fl_Group {} {
        label PreProcess
        xywh {1 271 255 116} box PLASTIC_UP_BOX labelfont 2 align 5
      } {
        Fl_Input m_Multiplier {
          label Multiplier
          xywh {160 272 75 25} labelfont 1
        }
        Fl_Input m_NumberOfIterations {
          label {Number Of Iterations}
          xywh {160 308 75 25} labelfont 1
        }
        Fl_Input m_InitialRadius {
          label {Initial Radius}
          xywh {160 344 75 25} labelfont 1
        }
      }
    }
    Fl_Window m_ShiftAndScaleParameterWindow {
      label {Shift and Scale Parameters}
      xywh {983 482 293 165} type Double hide
    } {
      Fl_Input m_Shift {
        label {Shift  }
        xywh {155 25 75 25} labelfont 1
      }
      Fl_Input m_Scale {
        label {Scale  }
        xywh {155 60 75 25} labelfont 1
      }
      Fl_Return_Button {} {
        label Ok
        callback {this->SetImageShift( atof(m_Shift->value()) );
this->SetImageScale( atof(m_Scale->value()) );
m_ShiftAndScaleParameterWindow->hide();}
        xywh {176 115 45 25} labelfont 1
      }
      Fl_Button {} {
        label Cancel
        callback {m_ShiftAndScaleParameterWindow->hide();}
        xywh {235 115 53 25} labelfont 1
      }
    }
    Fl_Window m_AboutWindow {
      label {About }
      callback {m_AboutWindow->hide();}
      xywh {-32000 -32000 268 161} type Double hide
    } {
      Fl_Button {} {
        label Dismiss
        callback {m_AboutWindow->hide();}
        xywh {205 135 60 25}
      }
      Fl_Clock {} {
        xywh {5 5 95 100}
      }
      Fl_Text_Display m_TextDisplay {
        xywh {105 5 160 110}
      }
    }
    code {m_TextBuffer.append("Tumor Segmentation\\nISIS Center\\nGeorgetown University");
m_TextDisplay->buffer(m_TextBuffer);} {}
    Fl_Window m_ImageControlWindow {
      label {Image Controls}
      xywh {-32000 -32000 318 201} type Double hide
    } {
      Fl_Return_Button {} {
        label Ok
        callback {this->OnImageControlOk();
m_ImageControlWindow->hide();}
        xywh {197 170 45 25} labelfont 1
      }
      Fl_Button {} {
        label Cancel
        callback {m_ImageControlWindow->hide();}
        xywh {256 170 55 25} labelfont 1
      }
      Fl_Value_Slider m_OverlayOpacity {
        label {Overlay Volume Opacity}
        callback {//this->SetOverlayedVolumeOpacity( m_OverlayOpacity->value() );}
        xywh {10 136 300 20} type Horizontal labelfont 1 align 5
      }
      Fl_Browser m_BackgroundVolumeList {
        label {Background Volume}
        xywh {10 30 145 70} type Hold labelfont 1 align 5
      }
      Fl_Browser m_OverlayVolumeList {
        label {Overlay Volume}
        xywh {165 30 140 70} type Hold labelfont 1 align 5
      }
    }
    Fl_Window m_ThresholdWindow {
      label {Threshold Volume}
      xywh {-32000 -32000 243 119} type Double hide
    } {
      Fl_Input m_LowerThresholdValue {
        label {Lower Threshold }
        xywh {155 8 75 26} labelfont 1
      }
      Fl_Input m_UpperThresholdValue {
        label {Upper Threshold }
        xywh {155 44 75 25} labelfont 1
      }
      Fl_Return_Button {} {
        label Ok
        callback {this->OnThreshold( atof(m_LowerThresholdValue->value()), atof(m_UpperThresholdValue->value()) );
m_ThresholdWindow->hide();}
        xywh {118 85 45 25} labelfont 1
      }
      Fl_Button {} {
        label Cancel
        callback {m_ThresholdWindow->hide();}
        xywh {177 85 53 25} labelfont 1
      }
    }
  }
  Function {~LiverTumorSegmentationGUI()} {return_type virtual
  } {}
  Function {Quit()} {return_type {virtual void}
  } {}
  Function {Load()} {return_type {virtual void}
  } {}
  Function {Show()} {return_type {virtual void}
  } {
    code {m_MainWindow->show();
m_SegmentationParametersWindow->hide();
m_ShiftAndScaleParameterWindow->hide();
m_AboutWindow->hide();
m_ImageControlWindow->hide();
m_ThresholdWindow->hide();} {}
  }
  Function {Hide()} {return_type {virtual void}
  } {
    code {m_MainWindow->hide();
m_SegmentationParametersWindow->hide();
m_ShiftAndScaleParameterWindow->hide();
m_AboutWindow->hide();
m_ImageControlWindow->hide();
m_ThresholdWindow->hide();} {}
  }
  Function {SelectAxialSlice( int )} {open return_type {virtual void}
  } {}
  Function {SelectCoronalSlice( int )} {open return_type {virtual void}
  } {}
  Function {SelectSaggitalSlice( int )} {open return_type {virtual void}
  } {}
  Function {LoadDICOM()} {open return_type {virtual void}
  } {}
  Function {OnSegmentation()} {open return_type {virtual void}
  } {}
  Function {GetImageScale(void)} {return_type {virtual float}
  } {
    code {return 1.0f;} {}
  }
  Function {SetImageScale( float val)} {return_type {virtual void}
  } {}
  Function {GetImageShift(void)} {selected return_type {virtual float}
  } {
    code {return 1.0f;} {}
  }
  Function {SetImageShift( float val)} {return_type {virtual void}
  } {}
  decl {Fl_Text_Buffer m_TextBuffer;} {}
  Function {GetOverlayedVolumeOpacity()} {return_type {virtual float}
  } {
    code {return 0.0f;} {}
  }
  Function {SetOverlayedVolumeOpacity( const float val )} {return_type {virtual bool}
  } {
    code {return false;} {}
  }
  Function {OnThreshold( const float lower, const float upper )} {return_type {virtual void}
  } {}
  Function {OnImageControl()} {return_type {virtual void}
  } {}
  Function {OnImageControlOk()} {return_type {virtual void}
  } {}
  Function {LoadSegmentedVolume( void )} {open return_type {virtual void}
  } {}
  Function {OnDebugButton()} {open return_type {virtual void}
  } {}
} 
