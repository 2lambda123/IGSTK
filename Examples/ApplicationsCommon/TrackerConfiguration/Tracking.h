/*=========================================================================

  Program:   Image Guided Surgery Software Toolkit
  Module:    Tracking.h
  Language:  C++
  Date:      $Date$
  Version:   $Revision$

  Copyright (c) ISC  Insight Software Consortium.  All rights reserved.
  See IGSTKCopyright.txt or http://www.igstk.org/copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notices for more information.

=========================================================================*/
#ifndef __Tracking_h
#define __Tracking_h

#include "igstkSandboxConfigure.h"

#include "igstkMacros.h"
#include "igstkObject.h"
#include "igstkEvents.h"
#include  "igstkAxesObject.h"


#include "igstkTracker.h"
#include "igstkTrackerTool.h"

#include "igstkTrackerController.h"
#include "igstkTrackerConfiguration.h"

/** \class Tracking
* 
* \brief Implementation class for device tracking 
*
* This class handles tracking for all IGSTK supported tracking devices.
*
*/
class Tracking : public igstk::Object 
{
public:

  /** Typedefs */
  igstkStandardClassBasicTraitsMacro( Tracking, igstk::Object );
  
  igstkLoggerMacro();

  /** Public request methods from the GUI to help operation workflow */

  /**
   * Set the tracker configuration we will use in the application.
   */
  void SetTrackerConfiguration( igstk::TrackerConfiguration *configuration );
  igstkEventMacro( InvalidRequestErrorEvent, igstk::IGSTKErrorEvent );

  void InitializeTracking();
  void StartTracking();
  void StopTracking();
  void DisconnectTracker();

  Tracking();
  virtual ~Tracking();

private:

  Tracking(const Self&); // purposely not implemented
  void operator=(const Self&); // purposely not implemented
  
  /** Define a initial world coordinate system */
  igstk::AxesObject::Pointer                            m_WorldReference;

  /** Class that observes the events generated by the tracker controller. */
  class TrackerControllerObserver : public itk::Command
  {
  public:
    typedef TrackerControllerObserver            Self;
    typedef ::itk::Command                       Superclass;
    typedef ::itk::SmartPointer<Self>            Pointer;
    typedef ::itk::SmartPointer<const Self>      ConstPointer;

    igstkNewMacro(Self)
    igstkTypeMacro(TrackerControllerObserver, itk::Command)

    void SetParent(Tracking *p); 

      /** Invoke this method when an initialization event occurs. */
    void Execute(itk::Object *caller, const itk::EventObject & event); 
    void Execute(const itk::Object *caller, const itk::EventObject & event);
  
    /**
     * Clear the current error.
     */
    void ClearError() 
    {
      this->m_ErrorOccured = false; 
      this->m_ErrorMessage.clear();
    }
    /**
     * If an error occurs in one of the observed IGSTK components this method will return true.
     */
    bool Error() 
    {
      return this->m_ErrorOccured;
    }

    void GetErrorMessage(std::string &errorMessage) 
    {
      errorMessage = this->m_ErrorMessage;
    }


  protected:
    TrackerControllerObserver() : m_Parent(NULL), m_ErrorOccured(false) {}
    virtual ~TrackerControllerObserver(){}


  private:
    Tracking *m_Parent;
    bool m_ErrorOccured;
    std::string m_ErrorMessage;

    //purposely not implemented
    TrackerControllerObserver(const Self&);
    void operator=(const Self&); 
  };


  //enum {NUM_TRACKER_TYPES = 4};
  enum {NUM_TRACKER_TYPES = 5};

           //these enumerations must match the list entries in the GUI from 
           //which this class inherits
    enum 
    {
        POLARIS_VICRA  = 0, 
        POLARIS_HYBRID = 1, 
        AURORA         = 2, 
        MICRON         = 3, 
        FLOCK_OF_BIRDS = 4
    };


  igstk::TrackerController::Pointer                     m_TrackerController;
  TrackerControllerObserver::Pointer                    m_TrackerControllerObserver;

  igstk::TrackerConfiguration                         * m_TrackerConfiguration;

  igstk::Tracker::Pointer                               m_Tracker;
  igstk::TrackerTool::Pointer                           m_WorkingTool;
  igstk::TrackerTool::Pointer                           m_ReferenceTool;
  

  /** Observer type for loaded event, 
   *  the callback can be set to a member function. */
  typedef itk::ReceptorMemberCommand < Self > LoadedObserverType;
  typedef itk::SimpleMemberCommand < Self > CancelObserverType;
  

  LoadedObserverType::Pointer               m_TrackerToolUpdateObserver;
  CancelObserverType::Pointer               m_TrackerConfigurationCancelObserver;


  igstk::Transform                                m_CurrentTransform;


  /** Log file */
  std::ofstream                                   m_LogFile;  

  void TrackingCallback( const itk::EventObject & event ); 

};

#endif
