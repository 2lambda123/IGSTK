# data file for the Fltk User Interface Designer (fluid)
version 1.0106 
header_name {.h} 
code_name {.cxx}
decl {\#include <FL/fl_ask.H>} {} 

class DeckOfCardRobotGUI {open
} {
  Function {DeckOfCardRobotGUI()} {open
  } {
    Fl_Window mainWindow {
      label {IGSTK: Deck of Card Robot}
      callback {Quit();} open
      xywh {255 206 930 732} type Double box PLASTIC_UP_BOX resizable
      code0 {\#include "igstkView2D.h"}
      code1 {\#include "igstkView3D.h"} visible
    } {
      Fl_Group ViewerGroup {
        xywh {165 0 768 692} box DOWN_BOX
      } {
        Fl_Box DisplayAxial {
          label {Display Axial}
          xywh {165 0 380 330} box FLAT_BOX color 0 labelcolor 7
          class {igstk::View2D}
        }
        Fl_Box DisplaySagittal {
          label {Display Sagittal}
          xywh {550 0 380 330} box FLAT_BOX color 0 labelcolor 7
          class {igstk::View2D}
        }
        Fl_Box Display3D {
          label {Display 3D}
          xywh {550 345 380 330} box FLAT_BOX color 0 labelcolor 7
          class {igstk::View3D}
        }
        Fl_Box DisplayCoronal {
          label {Display Coronal}
          xywh {165 345 380 330} box FLAT_BOX color 0 labelcolor 7
          class {igstk::View2D}
        }
        Fl_Value_Slider AxialSlider {
          callback {this->RequestResliceImage();}
          xywh {165 330 378 15} type {Horz Knob} box DOWN_FRAME maximum 3 step 1 deactivate
        }
        Fl_Value_Slider SagittalSlider {
          callback {this->RequestResliceImage();}
          xywh {550 330 380 15} type {Horz Knob} box DOWN_FRAME maximum 3 step 1 deactivate
        }
        Fl_Value_Slider CoronalSlider {
          callback {this->RequestResliceImage();}
          xywh {165 676 380 15} type {Horz Knob} box DOWN_FRAME maximum 3 step 1 deactivate
        }
      }
      Fl_Text_Display m_LogWindow {
        xywh {0 690 930 60} box DOWN_BOX
      }
      Fl_Tabs ControlGroup {open
        xywh {0 0 165 690}
      } {
        Fl_Group RobotControlGroup {
          label Robot
          xywh {0 25 165 665} box DOWN_BOX
        } {
          Fl_Light_Button LoadImageButton {
            label {Load Image}
            callback {RequestLoadImage();}
            xywh {15 145 130 25} box PLASTIC_UP_FRAME labelsize 11
          }
          Fl_Light_Button SetPatientNameButton {
            label {Register Patient}
            callback {RequestSetPatientName();} selected
            xywh {15 75 130 25} box PLASTIC_UP_FRAME labelsize 11
          }
          Fl_Light_Button QuitButton {
            label Quit
            callback {Quit();}
            xywh {20 650 130 25} type Normal box PLASTIC_UP_FRAME labelsize 11
          }
          Fl_Group {} {
            label {Path Planning}
            xywh {10 285 140 135} box EMBOSSED_FRAME labelsize 11 align 17
          } {
            Fl_Light_Button {} {
              label {Target Point}
              callback {RequestSetTargetPoint();}
              xywh {15 320 130 25} box PLASTIC_UP_FRAME labelsize 11 labelcolor 1
            }
            Fl_Light_Button {} {
              label {Entry Point}
              callback {RequestSetEntryPoint();}
              xywh {15 370 130 25} box PLASTIC_UP_FRAME labelsize 11 labelcolor 4
            }
          }
          Fl_Light_Button RobotRegistration {
            label Registration
            callback {std::cout<<"Registration";}
            xywh {15 220 130 25} box PLASTIC_UP_FRAME labelsize 11
          }
          Fl_Group {} {
            label {Robot Control}
            xywh {10 444 140 186} box EMBOSSED_FRAME labelsize 11 align 17
          } {
            Fl_Light_Button {} {
              label Home
              callback {RequestSetTargetPoint();}
              xywh {15 528 130 25} box PLASTIC_UP_FRAME labelsize 11 labelcolor 0
            }
            Fl_Light_Button {} {
              label Targeting
              callback {RequestSetEntryPoint();}
              xywh {15 583 130 25} box PLASTIC_UP_FRAME labelsize 11 labelcolor 0
            }
            Fl_Light_Button {} {
              label {Connect to Robot}
              callback {RequestSetTargetPoint();}
              xywh {17 480 130 25} box PLASTIC_UP_FRAME labelsize 11 labelcolor 0
            }
          }
        }
        Fl_Group TrackerControlGroup {
          label Tracker
          xywh {0 25 165 665} hide
        } {
          Fl_Group {} {
            xywh {12 277 140 80} box EMBOSSED_FRAME
          } {
            Fl_Light_Button AddTrackerLandmarkButton {
              label {Add Tracker Landmark}
              callback {RequestAddTrackerLandmark();}
              xywh {17 285 130 25} box PLASTIC_UP_FRAME labelsize 11
            }
            Fl_Value_Output NumberOfTrackerLandmarks {
              label {No.}
              xywh {42 322 32 25} box DOWN_BOX labelsize 11 maximum 100 step 1 textfont 1
            }
            Fl_Button ClearTrackerLandmarks {
              label Clear
              callback {RequestClearTrackerLandmarks();}
              xywh {98 322 50 25} box PLASTIC_UP_FRAME labelsize 11
            }
          }
          Fl_Group {} {
            xywh {10 75 140 80} box EMBOSSED_FRAME
          } {
            Fl_Light_Button AddImageLandmarkButton {
              label {Add Image Landmark}
              callback {RequestAddImageLandmark();}
              xywh {15 82 130 25} box PLASTIC_UP_FRAME labelsize 11
            }
            Fl_Value_Output NumberOfImageLandmarks {
              label {No.}
              xywh {41 119 32 25} box DOWN_BOX labelsize 11 maximum 100 step 1 textfont 1 textcolor 0
            }
            Fl_Button ClearImageLandmarks {
              label Clear
              callback {RequestClearImageLandmarks();}
              xywh {95 121 50 25} box PLASTIC_UP_FRAME labelsize 11
            }
          }
          Fl_Light_Button InitializeTrackerButton {
            label {Initialize Tracker}
            callback {RequestInitializeTracker();}
            xywh {15 200 130 25} box PLASTIC_UP_FRAME labelsize 11
          }
          Fl_Light_Button TrackingButton {
            label Tracking
            callback {if(o->value())
{
  RequestStartTracking();
}
else
{
    RequestStopTracking();
}}
            xywh {20 615 130 25} box PLASTIC_UP_FRAME labelsize 11
          }
          Fl_Group {} {open
            xywh {13 391 140 80} box EMBOSSED_FRAME labelsize 11
          } {
            Fl_Light_Button RegistrationButton {
              label {Landmark Registration}
              callback {RequestRegistration();}
              xywh {18 401 130 25} box PLASTIC_UP_FRAME labelsize 11
            }
            Fl_Value_Output RegistrationError {
              label {Error:}
              xywh {58 436 45 25} box DOWN_BOX labelsize 11 maximum 1000 step 0.001 textfont 1
            }
          }
        }
      }
    }
    code {mainWindow->show();
hasQuitted = false;} {}
  }
  Function {~DeckOfCardRobotGUI()} {return_type virtual
  } {
    code {delete DisplayAxial;
delete DisplayCoronal;
delete DisplaySagittal;
delete Display3D;} {}
  }
  Function {RequestSetPatientName()} {open return_type {virtual void}
  } {}
  Function {RequestLoadImage()} {open return_type {virtual void}
  } {}
  Function {RequestInitializeTracker()} {open return_type {virtual void}
  } {}
  Function {RequestAddImageLandmark()} {open return_type {virtual void}
  } {}
  Function {RequestAddTrackerLandmark()} {open return_type {virtual void}
  } {}
  Function {RequestClearImageLandmarks()} {open return_type {virtual void}
  } {}
  Function {RequestClearTrackerLandmarks()} {open return_type {virtual void}
  } {}
  Function {RequestRegistration()} {open return_type {virtual void}
  } {}
  Function {RequestStartTracking()} {open return_type {virtual void}
  } {}
  Function {RequestStopTracking()} {open return_type {virtual void}
  } {}
  Function {RequestResliceImage()} {return_type {virtual void}
  } {}
  Function {RequestReset()} {open return_type {virtual void}
  } {}
  Function {RequestSetTargetPoint()} {open return_type {virtual void}
  } {}
  Function {RequestSetEntryPoint()} {open return_type {virtual void}
  } {}
  decl {bool hasQuitted;} {}
  Function {Quit()} {return_type void
  } {
    code {int i = fl_choice("Are you sure you want to quit?", NULL,"Yes","No"); 
if ( i == 1 )
  {
  mainWindow->hide();
  this->hasQuitted = true;
  }
else
  {
  return;
  }} {}
  }
  Function {HasQuitted()} {return_type bool
  } {
    code {return this->hasQuitted;} {}
  }
} 
