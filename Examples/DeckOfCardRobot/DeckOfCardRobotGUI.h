// generated by Fast Light User Interface Designer (fluid) version 1.0107

#ifndef DeckOfCardRobotGUI_h
#define DeckOfCardRobotGUI_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include "igstkFLTKWidget.h"
#include <FL/Fl_Group.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Menu_Button.H>
#include <FL/Fl_Text_Display.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Value_Output.H>

class DeckOfCardRobotGUI : public igstk::Object {
public:
  DeckOfCardRobotGUI();
  Fl_Double_Window *mainWindow;
private:
  void cb_mainWindow_i(Fl_Double_Window*, void*);
  static void cb_mainWindow(Fl_Double_Window*, void*);
public:
  Fl_Group *ViewerGroup;
  igstk::FLTKWidget *DisplayAxialWidget;
  igstk::FLTKWidget *DisplaySagittalWidget;
  igstk::FLTKWidget *Display3DWidget;
  igstk::FLTKWidget *DisplayCoronalWidget;
  igstk::FLTKWidget *DisplayObliqueWidget;
  Fl_Value_Slider *AxialSlider;
private:
  void cb_AxialSlider_i(Fl_Value_Slider*, void*);
  static void cb_AxialSlider(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *SagittalSlider;
private:
  void cb_SagittalSlider_i(Fl_Value_Slider*, void*);
  static void cb_SagittalSlider(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *CoronalSlider;
private:
  void cb_CoronalSlider_i(Fl_Value_Slider*, void*);
  static void cb_CoronalSlider(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *NeedleSlider;
private:
  void cb_NeedleSlider_i(Fl_Value_Slider*, void*);
  static void cb_NeedleSlider(Fl_Value_Slider*, void*);
public:
  Fl_Menu_Button *SwitchingView;
  static Fl_Menu_Item menu_SwitchingView[];
private:
  void cb_3D_i(Fl_Menu_*, void*);
  static void cb_3D(Fl_Menu_*, void*);
  void cb_Obliq_i(Fl_Menu_*, void*);
  static void cb_Obliq(Fl_Menu_*, void*);
public:
  Fl_Text_Display *m_LogWindow;
  Fl_Group *RobotControlGroup;
  Fl_Light_Button *LoadImageButton;
private:
  void cb_LoadImageButton_i(Fl_Light_Button*, void*);
  static void cb_LoadImageButton(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *QuitButton;
private:
  void cb_QuitButton_i(Fl_Light_Button*, void*);
  static void cb_QuitButton(Fl_Light_Button*, void*);
  void cb_Target_i(Fl_Light_Button*, void*);
  static void cb_Target(Fl_Light_Button*, void*);
  void cb_Entry_i(Fl_Light_Button*, void*);
  static void cb_Entry(Fl_Light_Button*, void*);
  void cb_Home_i(Fl_Light_Button*, void*);
  static void cb_Home(Fl_Light_Button*, void*);
  void cb_Targeting_i(Fl_Light_Button*, void*);
  static void cb_Targeting(Fl_Light_Button*, void*);
  void cb_Connect_i(Fl_Light_Button*, void*);
  static void cb_Connect(Fl_Light_Button*, void*);
public:
  Fl_Light_Button *SetROI;
private:
  void cb_SetROI_i(Fl_Light_Button*, void*);
  static void cb_SetROI(Fl_Light_Button*, void*);
public:
  Fl_Value_Output *TargetDistance;
  Fl_Light_Button *RobotRegistration;
private:
  void cb_RobotRegistration_i(Fl_Light_Button*, void*);
  static void cb_RobotRegistration(Fl_Light_Button*, void*);
public:
  Fl_Value_Output *RegistrationError;
  virtual ~DeckOfCardRobotGUI();
  virtual void RequestSetROI();
  virtual void RequestLoadImage();
  virtual void RequestInitializeTracker();
  virtual void RequestRegistration();
  virtual void RequestResliceImage();
  virtual void RequestSetTargetPoint();
  virtual void RequestSetEntryPoint();
  virtual void RequestConnectToRobot();
  virtual void RequestHomeRobot();
  virtual void RequestTargetingRobot();
private:
  bool hasQuitted;
public:
  void Quit();
  bool HasQuitted();
  virtual void RequestInsertNeedle();
};
#endif
