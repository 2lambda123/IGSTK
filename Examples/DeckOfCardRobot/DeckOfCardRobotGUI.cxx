// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "/home/ozgur/workspace/IGSTKSandbox/Examples/DeckOfCardRobot/DeckOfCardRobotGUI.h"
#include <FL/fl_ask.H>

void DeckOfCardRobotGUI::cb_mainWindow_i(Fl_Double_Window*, void*) {
  Quit();
}
void DeckOfCardRobotGUI::cb_mainWindow(Fl_Double_Window* o, void* v) {
  ((DeckOfCardRobotGUI*)(o->user_data()))->cb_mainWindow_i(o,v);
}

void DeckOfCardRobotGUI::cb_AxialSlider_i(Fl_Value_Slider*, void*) {
  this->RequestResliceImage();
}
void DeckOfCardRobotGUI::cb_AxialSlider(Fl_Value_Slider* o, void* v) {
  ((DeckOfCardRobotGUI*)(o->parent()->parent()->user_data()))->cb_AxialSlider_i(o,v);
}

void DeckOfCardRobotGUI::cb_SagittalSlider_i(Fl_Value_Slider*, void*) {
  this->RequestResliceImage();
}
void DeckOfCardRobotGUI::cb_SagittalSlider(Fl_Value_Slider* o, void* v) {
  ((DeckOfCardRobotGUI*)(o->parent()->parent()->user_data()))->cb_SagittalSlider_i(o,v);
}

void DeckOfCardRobotGUI::cb_CoronalSlider_i(Fl_Value_Slider*, void*) {
  this->RequestResliceImage();
}
void DeckOfCardRobotGUI::cb_CoronalSlider(Fl_Value_Slider* o, void* v) {
  ((DeckOfCardRobotGUI*)(o->parent()->parent()->user_data()))->cb_CoronalSlider_i(o,v);
}

void DeckOfCardRobotGUI::cb_NeedleSlider_i(Fl_Value_Slider*, void*) {
  this->RequestInsertNeedle();
}
void DeckOfCardRobotGUI::cb_NeedleSlider(Fl_Value_Slider* o, void* v) {
  ((DeckOfCardRobotGUI*)(o->parent()->parent()->user_data()))->cb_NeedleSlider_i(o,v);
}

void DeckOfCardRobotGUI::cb_3D_i(Fl_Menu_*, void*) {
  //Display3D->show();
//DisplayOblique->hide();
}
void DeckOfCardRobotGUI::cb_3D(Fl_Menu_* o, void* v) {
  ((DeckOfCardRobotGUI*)(o->parent()->parent()->user_data()))->cb_3D_i(o,v);
}

void DeckOfCardRobotGUI::cb_Obliq_i(Fl_Menu_*, void*) {
  //Display3D->hide();
//DisplayOblique->show();
}
void DeckOfCardRobotGUI::cb_Obliq(Fl_Menu_* o, void* v) {
  ((DeckOfCardRobotGUI*)(o->parent()->parent()->user_data()))->cb_Obliq_i(o,v);
}

Fl_Menu_Item DeckOfCardRobotGUI::menu_SwitchingView[] = {
 {"3D", 0,  (Fl_Callback*)DeckOfCardRobotGUI::cb_3D, 0, 12, FL_NORMAL_LABEL, 0, 14, 0},
 {"Obliq", 0,  (Fl_Callback*)DeckOfCardRobotGUI::cb_Obliq, 0, 8, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void DeckOfCardRobotGUI::cb_LoadImageButton_i(Fl_Light_Button*, void*) {
  RequestLoadImage();
}
void DeckOfCardRobotGUI::cb_LoadImageButton(Fl_Light_Button* o, void* v) {
  ((DeckOfCardRobotGUI*)(o->parent()->parent()->user_data()))->cb_LoadImageButton_i(o,v);
}

void DeckOfCardRobotGUI::cb_QuitButton_i(Fl_Light_Button*, void*) {
  Quit();
}
void DeckOfCardRobotGUI::cb_QuitButton(Fl_Light_Button* o, void* v) {
  ((DeckOfCardRobotGUI*)(o->parent()->parent()->user_data()))->cb_QuitButton_i(o,v);
}

void DeckOfCardRobotGUI::cb_Target_i(Fl_Light_Button*, void*) {
  RequestSetTargetPoint();
}
void DeckOfCardRobotGUI::cb_Target(Fl_Light_Button* o, void* v) {
  ((DeckOfCardRobotGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Target_i(o,v);
}

void DeckOfCardRobotGUI::cb_Entry_i(Fl_Light_Button*, void*) {
  RequestSetEntryPoint();
}
void DeckOfCardRobotGUI::cb_Entry(Fl_Light_Button* o, void* v) {
  ((DeckOfCardRobotGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Entry_i(o,v);
}

void DeckOfCardRobotGUI::cb_Home_i(Fl_Light_Button*, void*) {
  RequestHomeRobot();
}
void DeckOfCardRobotGUI::cb_Home(Fl_Light_Button* o, void* v) {
  ((DeckOfCardRobotGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Home_i(o,v);
}

void DeckOfCardRobotGUI::cb_Targeting_i(Fl_Light_Button*, void*) {
  RequestTargetingRobot();
}
void DeckOfCardRobotGUI::cb_Targeting(Fl_Light_Button* o, void* v) {
  ((DeckOfCardRobotGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Targeting_i(o,v);
}

void DeckOfCardRobotGUI::cb_Connect_i(Fl_Light_Button*, void*) {
  RequestConnectToRobot();
}
void DeckOfCardRobotGUI::cb_Connect(Fl_Light_Button* o, void* v) {
  ((DeckOfCardRobotGUI*)(o->parent()->parent()->parent()->user_data()))->cb_Connect_i(o,v);
}

void DeckOfCardRobotGUI::cb_SetROI_i(Fl_Light_Button*, void*) {
  RequestSetROI();
}
void DeckOfCardRobotGUI::cb_SetROI(Fl_Light_Button* o, void* v) {
  ((DeckOfCardRobotGUI*)(o->parent()->parent()->user_data()))->cb_SetROI_i(o,v);
}

void DeckOfCardRobotGUI::cb_RobotRegistration_i(Fl_Light_Button*, void*) {
  RequestRegistration();
}
void DeckOfCardRobotGUI::cb_RobotRegistration(Fl_Light_Button* o, void* v) {
  ((DeckOfCardRobotGUI*)(o->parent()->parent()->parent()->user_data()))->cb_RobotRegistration_i(o,v);
}

DeckOfCardRobotGUI::DeckOfCardRobotGUI() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = mainWindow = new Fl_Double_Window(930, 730, "IGSTK: Deck of Card Robot");
    w = o;
    o->box(FL_PLASTIC_UP_BOX);
    o->callback((Fl_Callback*)cb_mainWindow, (void*)(this));
    { Fl_Group* o = ViewerGroup = new Fl_Group(164, 0, 771, 696);
      o->box(FL_DOWN_BOX);
      { igstk::FLTKWidget* o = DisplayAxialWidget = new igstk::FLTKWidget(165, 0, 380, 330, "Display Axial");
        o->box(FL_FLAT_BOX);
        o->color(FL_FOREGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { igstk::FLTKWidget* o = DisplaySagittalWidget = new igstk::FLTKWidget(550, 0, 380, 330, "Display Sagittal");
        o->box(FL_FLAT_BOX);
        o->color(FL_FOREGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { igstk::FLTKWidget* o = Display3DWidget = new igstk::FLTKWidget(550, 345, 380, 330, "Display 3D");
        o->box(FL_FLAT_BOX);
        o->color(FL_FOREGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { igstk::FLTKWidget* o = DisplayCoronalWidget = new igstk::FLTKWidget(165, 345, 380, 330, "Display Coronal");
        o->box(FL_FLAT_BOX);
        o->color(FL_FOREGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { igstk::FLTKWidget* o = DisplayObliqueWidget = new igstk::FLTKWidget(550, 345, 380, 330, "Display Oblique");
        o->box(FL_NO_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->align(FL_ALIGN_CENTER);
        o->when(FL_WHEN_RELEASE);
      }
      { Fl_Value_Slider* o = AxialSlider = new Fl_Value_Slider(164, 330, 378, 15);
        o->type(5);
        o->box(FL_DOWN_FRAME);
        o->maximum(3);
        o->step(1);
        o->callback((Fl_Callback*)cb_AxialSlider);
        o->deactivate();
      }
      { Fl_Value_Slider* o = SagittalSlider = new Fl_Value_Slider(550, 330, 380, 15);
        o->type(5);
        o->box(FL_DOWN_FRAME);
        o->maximum(3);
        o->step(1);
        o->callback((Fl_Callback*)cb_SagittalSlider);
        o->deactivate();
      }
      { Fl_Value_Slider* o = CoronalSlider = new Fl_Value_Slider(164, 675, 380, 15);
        o->type(5);
        o->box(FL_DOWN_FRAME);
        o->maximum(3);
        o->step(1);
        o->callback((Fl_Callback*)cb_CoronalSlider);
        o->deactivate();
      }
      { Fl_Value_Slider* o = NeedleSlider = new Fl_Value_Slider(550, 675, 350, 15);
        o->type(5);
        o->box(FL_DOWN_FRAME);
        o->maximum(3);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_NeedleSlider);
        o->deactivate();
      }
      { Fl_Menu_Button* o = SwitchingView = new Fl_Menu_Button(899, 675, 30, 15);
        o->box(FL_EMBOSSED_BOX);
        o->menu(menu_SwitchingView);
      }
      o->end();
    }
    { Fl_Text_Display* o = m_LogWindow = new Fl_Text_Display(0, 690, 930, 60);
      o->box(FL_DOWN_BOX);
    }
    { Fl_Group* o = RobotControlGroup = new Fl_Group(0, 0, 165, 690);
      o->box(FL_DOWN_BOX);
      o->labeltype(FL_NO_LABEL);
      { Fl_Light_Button* o = LoadImageButton = new Fl_Light_Button(15, 25, 130, 25, "Load Image");
        o->box(FL_PLASTIC_UP_FRAME);
        o->labelsize(11);
        o->callback((Fl_Callback*)cb_LoadImageButton);
      }
      { Fl_Light_Button* o = QuitButton = new Fl_Light_Button(15, 640, 130, 25, "Quit");
        o->type(0);
        o->box(FL_PLASTIC_UP_FRAME);
        o->labelsize(11);
        o->callback((Fl_Callback*)cb_QuitButton);
      }
      { Fl_Group* o = new Fl_Group(11, 181, 141, 117, "Path Planning");
        o->box(FL_EMBOSSED_FRAME);
        o->labelsize(11);
        o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
        { Fl_Light_Button* o = new Fl_Light_Button(16, 211, 130, 25, "Target Point");
          o->box(FL_PLASTIC_UP_FRAME);
          o->labelsize(11);
          o->callback((Fl_Callback*)cb_Target);
        }
        { Fl_Light_Button* o = new Fl_Light_Button(16, 257, 130, 25, "Entry Point");
          o->box(FL_PLASTIC_UP_FRAME);
          o->labelsize(11);
          o->callback((Fl_Callback*)cb_Entry);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(11, 439, 140, 174, "Robot Control");
        o->box(FL_EMBOSSED_FRAME);
        o->labelsize(11);
        o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
        { Fl_Light_Button* o = new Fl_Light_Button(16, 521, 130, 25, "Home");
          o->box(FL_PLASTIC_UP_FRAME);
          o->labelsize(11);
          o->callback((Fl_Callback*)cb_Home);
        }
        { Fl_Light_Button* o = new Fl_Light_Button(16, 570, 130, 25, "Targeting");
          o->box(FL_PLASTIC_UP_FRAME);
          o->labelsize(11);
          o->callback((Fl_Callback*)cb_Targeting);
        }
        { Fl_Light_Button* o = new Fl_Light_Button(16, 471, 130, 25, "Connect to Robot");
          o->box(FL_PLASTIC_UP_FRAME);
          o->labelsize(11);
          o->callback((Fl_Callback*)cb_Connect);
        }
        o->end();
      }
      { Fl_Light_Button* o = SetROI = new Fl_Light_Button(15, 3, 130, 25, "Locate End Factor");
        o->box(FL_PLASTIC_UP_FRAME);
        o->labelsize(11);
        o->callback((Fl_Callback*)cb_SetROI);
        o->hide();
        o->deactivate();
      }
      { Fl_Group* o = new Fl_Group(11, 323, 140, 95, "Biopsy Simulation");
        o->box(FL_EMBOSSED_FRAME);
        o->labelsize(11);
        o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
        { Fl_Value_Output* o = TargetDistance = new Fl_Value_Output(45, 373, 65, 25, "Distance to Target (mm)");
          o->box(FL_DOWN_BOX);
          o->labelsize(11);
          o->maximum(1000);
          o->step(0.01);
          o->textfont(1);
          o->align(FL_ALIGN_TOP);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(10, 73, 140, 84);
        o->box(FL_EMBOSSED_FRAME);
        o->labelsize(11);
        o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
        { Fl_Light_Button* o = RobotRegistration = new Fl_Light_Button(15, 83, 130, 25, "Registration");
          o->box(FL_PLASTIC_UP_FRAME);
          o->labelsize(11);
          o->callback((Fl_Callback*)cb_RobotRegistration);
        }
        { Fl_Value_Output* o = RegistrationError = new Fl_Value_Output(95, 122, 45, 25, "Error:");
          o->box(FL_DOWN_BOX);
          o->labelsize(11);
          o->maximum(1000);
          o->step(0.001);
          o->textfont(1);
        }
        o->end();
      }
      o->end();
    }
    o->end();
    o->resizable(o);
  }
  mainWindow->show();
hasQuitted = false;
}

DeckOfCardRobotGUI::~DeckOfCardRobotGUI() {
  delete DisplayAxialWidget;
delete DisplayCoronalWidget;
delete DisplaySagittalWidget;
delete Display3DWidget;
}

void DeckOfCardRobotGUI::RequestSetROI() {
}

void DeckOfCardRobotGUI::RequestLoadImage() {
}

void DeckOfCardRobotGUI::RequestInitializeTracker() {
}

void DeckOfCardRobotGUI::RequestRegistration() {
}

void DeckOfCardRobotGUI::RequestResliceImage() {
}

void DeckOfCardRobotGUI::RequestSetTargetPoint() {
}

void DeckOfCardRobotGUI::RequestSetEntryPoint() {
}

void DeckOfCardRobotGUI::RequestConnectToRobot() {
}

void DeckOfCardRobotGUI::RequestHomeRobot() {
}

void DeckOfCardRobotGUI::RequestTargetingRobot() {
}

void DeckOfCardRobotGUI::Quit() {
  int i = fl_choice("Are you sure you want to quit?", NULL,"Yes","No"); 
if ( i == 1 )
  {
  mainWindow->hide();
  this->hasQuitted = true;
  }
else
  {
  return;
  }
}

bool DeckOfCardRobotGUI::HasQuitted() {
  return this->hasQuitted;
}

void DeckOfCardRobotGUI::RequestInsertNeedle() {
}
